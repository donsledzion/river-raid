/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/cs-draw.js":
/*!*********************************!*\
  !*** ./resources/js/cs-draw.js ***!
  \*********************************/
/***/ (() => {

eval("var i = $('.cs-p').length - 1;\ndraw();\n$(\"#add\").click(function () {\n  draw();\n  ++i;\n  $(\"#dynamicTable\").append('' + '<tr class=\"cs-p p-0 m-0\" data-id=\"' + i + '\">' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-i-' + i + '\" type=\"number\"  name=\"point[' + i + '][number]\" class=\"form-control text-sm-center\" readonly value=\"' + (i + 1) + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-x-' + i + '\" type=\"number\" name=\"point[' + i + '][x]\" data-id=\"' + i + '\" class=\"cs-x form-control text-sm-center\" step=\"0.01\" value=\"0.00\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-y-' + i + '\" type=\"number\" name=\"point[' + i + '][y]\" data-id=\"' + i + '\" class=\"cs-y form-control text-sm-center\" step=\"0.01\" value=\"0.00\"  /></td>' + '<td class=\"p-0 m-0\">' + '<button type=\"button\" class=\"btn btn-danger remove-tr w-100\">-</button>' + '</td>' + '</tr>');\n});\n$(document).on('click', '.remove-tr', function () {\n  $(this).parents('tr').remove();\n  draw();\n});\n$(document).on('click', '#draw-button', function () {\n  draw();\n});\n\nfunction CsPoint() {\n  var _distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  var _height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  this.distance = _distance;\n  this.height = _height;\n}\n\nfunction draw() {\n  console.clear();\n  var CrossSection = [];\n  var compLvl = $(\"#comp_lvl\").val();\n  $(\".cs-x\").each(function () {\n    var x = $(\"#cs-x-\" + $(this).data(\"id\")).val();\n    var y = $(\"#cs-y-\" + $(this).data(\"id\")).val();\n    var cssss = CrossSection.push(new CsPoint(x, y));\n    console.log(CrossSection[cssss - 1]);\n  });\n  CrossSection.sort(function (a, b) {\n    return a.distance - b.distance;\n  });\n  $('.cs-p').remove();\n  var j = 0;\n  var csHeight = 0;\n  /*******************************\n   * testing another approach\n   * */\n\n  for (var r = 0; r < CrossSection.length; r++) {\n    var insertButton = '<button type=\"button\" class=\"btn btn-danger remove-tr w-100\">-</button>';\n\n    if (r === 0) {\n      insertButton = '<button type=\"button\" name=\"add\" id=\"add\" class=\"btn btn-success w-100\">+</button>';\n    }\n\n    $(\"#dynamicTable\").append('' + '<tr class=\"cs-p p-0 m-0\" data-id=\"' + r + '\">' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-i-' + r + '\" type=\"number\"  name=\"point[' + r + '][number]\" class=\"form-control text-sm-center\" readonly value=\"' + (r + 1) + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-x-' + r + '\" type=\"number\" name=\"point[' + r + '][x]\" data-id=\"' + r + '\" class=\"cs-x form-control text-sm-center\" step=\"0.01\" value=\"' + CrossSection[r].distance + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-y-' + r + '\" type=\"number\" name=\"point[' + r + '][y]\" data-id=\"' + r + '\" class=\"cs-y form-control text-sm-center\" step=\"0.01\" value=\"' + CrossSection[r].height + '\"  /></td>' + '<td class=\"p-0 m-0\">' + insertButton + '</td>' + '</tr>');\n\n    if (CrossSection[r].height > csHeight) {\n      csHeight = CrossSection[r].height;\n    }\n  }\n  /******************************\n   * */\n\n  /*$(\".cs-i\").each(function() {\n           $(\"#cs-i-\" + j)\n              .attr(\"value\",j+1)\n              .attr(\"id\",\"cs-i-\"+j)\n              .attr(\"name\",\"point[\"+j+\"][number]\");\n          //console.log(\"Insert into: x = \"+$(\"#cs-x-\" + j).val());\n          $(\"#cs-x-\" + j)\n              .attr(\"value\",CrossSection[j].distance)\n              .attr(\"id\",\"cs-x-\"+j)\n              .attr(\"data-id\",+j)\n              .attr(\"name\",\"point[\"+j+\"][x]\");\n          //console.log(\"Insert into: y = \"+$(\"#cs-y-\" + j).val());\n          $(\"#cs-y-\" + j)\n              .attr(\"value\",CrossSection[j].height)\n              .attr(\"id\",\"cs-y-\"+j)\n              .attr(\"data-id\",+j)\n              .attr(\"name\",\"point[\"+j+\"][y]\");\n           if(CrossSection[j].height > csHeight){\n              csHeight = CrossSection[j].height ;\n          }\n          console.log(\"Point [\"+(j+1)+\"] = \" + CrossSection[j].distance+\" , \" + CrossSection[j].height+\" |\");\n          j++;\n      }\n  );*/\n\n\n  var csWidth = CrossSection[CrossSection.length - 1].distance;\n  var canvas = document.getElementById('canvas');\n\n  if (canvas.getContext) {\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    console.log(\"csWidth: \" + csWidth);\n    console.log(\"csHeight: \" + csHeight);\n    var x_offset = canvas.width * 0.1;\n    var y_offset = +120;\n    var xMultip = (canvas.width - 2 * x_offset) / +csWidth;\n    var yMultip = (canvas.height - 2 * x_offset) / +csHeight;\n    console.log(\"xMultip: \" + xMultip);\n    console.log(\"yMultip: \" + yMultip);\n    console.log(\"compLvl: \" + compLvl);\n    ctx.beginPath();\n    ctx.moveTo(0, y_offset);\n    ctx.lineTo(x_offset, y_offset);\n    ctx.lineTo(x_offset + +CrossSection[0].distance, y_offset - (+CrossSection[0].height - +compLvl) * yMultip);\n\n    for (var k = 1; k < CrossSection.length; k++) {\n      ctx.moveTo(x_offset + +xMultip * CrossSection[k - 1].distance, y_offset);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k].distance, y_offset);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k].distance, y_offset - (+CrossSection[k].height - +compLvl) * yMultip);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k - 1].distance, y_offset - (+CrossSection[k - 1].height - +compLvl) * yMultip);\n    } //ctx.closePath();\n\n\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/cs-draw.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/cs-draw.js"]();
/******/ 	
/******/ })()
;
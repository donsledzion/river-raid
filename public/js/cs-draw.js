/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/cs-draw.js":
/*!*********************************!*\
  !*** ./resources/js/cs-draw.js ***!
  \*********************************/
/***/ (() => {

eval("var i = $('.cs-p').length - 1;\ndraw();\n$(document).on('click', '#add', function () {\n  draw();\n  ++i;\n  console.log(\"Clicked! (i = \" + i + \" )\");\n  $(\"#dynamicTable\").append('' + '<tr class=\"cs-p p-0 m-0\" data-id=\"' + i + '\">' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-i-' + i + '\" type=\"number\"  name=\"point[' + i + '][number]\" class=\"form-control text-sm-center\" readonly value=\"' + (i + 1) + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-x-' + i + '\" type=\"number\" name=\"point[' + i + '][x]\" data-id=\"' + i + '\" class=\"cs-x form-control text-sm-center\" step=\"0.01\" value=\"0.00\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-y-' + i + '\" type=\"number\" name=\"point[' + i + '][y]\" data-id=\"' + i + '\" class=\"cs-y form-control text-sm-center\" step=\"0.01\" value=\"0.00\"  /></td>' + '<td class=\"p-0 m-0\">' + '<button type=\"button\" class=\"btn btn-danger remove-tr w-100\">-</button>' + '</td>' + '</tr>');\n});\n$(document).on('click', '.remove-tr', function () {\n  $(this).parents('tr').remove();\n  draw();\n});\n$(document).on('click', '#draw-button', function () {\n  draw();\n});\n\nfunction CsPoint() {\n  var _distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  var _height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  this.distance = _distance;\n  this.height = _height;\n}\n\nfunction draw() {\n  console.clear();\n  var CrossSection = [];\n  var refLvl = $(\"#ref_lvl\").val();\n  $(\".cs-x\").each(function () {\n    var x = $(\"#cs-x-\" + $(this).data(\"id\")).val();\n    var y = $(\"#cs-y-\" + $(this).data(\"id\")).val();\n    var cssss = CrossSection.push(new CsPoint(x, y));\n    console.log(CrossSection[cssss - 1]);\n  });\n  CrossSection.sort(function (a, b) {\n    return a.distance - b.distance;\n  });\n  $('.cs-p').remove();\n  var j = 0;\n  var csHeight = 0;\n  /*******************************\n   * testing another approach\n   * */\n\n  for (var r = 0; r < CrossSection.length; r++) {\n    var insertButton = '<button type=\"button\" class=\"btn btn-danger remove-tr w-100\">-</button>';\n\n    if (r === 0) {\n      insertButton = '<button type=\"button\" name=\"add\" id=\"add\" class=\"btn btn-success w-100\">+</button>';\n    }\n\n    $(\"#dynamicTable\").append('' + '<tr class=\"cs-p p-0 m-0\" data-id=\"' + r + '\">' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-i-' + r + '\" type=\"number\"  name=\"point[' + r + '][number]\" class=\"form-control text-sm-center\" readonly value=\"' + (r + 1) + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-x-' + r + '\" type=\"number\" name=\"point[' + r + '][x]\" data-id=\"' + r + '\" class=\"cs-x form-control text-sm-center\" step=\"0.01\" value=\"' + CrossSection[r].distance + '\" />' + '</td>' + '<td class=\"p-0 m-0\">' + '<input id=\"cs-y-' + r + '\" type=\"number\" name=\"point[' + r + '][y]\" data-id=\"' + r + '\" class=\"cs-y form-control text-sm-center\" step=\"0.01\" value=\"' + CrossSection[r].height + '\"  /></td>' + '<td class=\"p-0 m-0\">' + insertButton + '</td>' + '</tr>');\n\n    if (CrossSection[r].height > csHeight) {\n      csHeight = CrossSection[r].height;\n    }\n  }\n  /******************************\n   * */\n\n  /*$(\".cs-i\").each(function() {\n           $(\"#cs-i-\" + j)\n              .attr(\"value\",j+1)\n              .attr(\"id\",\"cs-i-\"+j)\n              .attr(\"name\",\"point[\"+j+\"][number]\");\n          //console.log(\"Insert into: x = \"+$(\"#cs-x-\" + j).val());\n          $(\"#cs-x-\" + j)\n              .attr(\"value\",CrossSection[j].distance)\n              .attr(\"id\",\"cs-x-\"+j)\n              .attr(\"data-id\",+j)\n              .attr(\"name\",\"point[\"+j+\"][x]\");\n          //console.log(\"Insert into: y = \"+$(\"#cs-y-\" + j).val());\n          $(\"#cs-y-\" + j)\n              .attr(\"value\",CrossSection[j].height)\n              .attr(\"id\",\"cs-y-\"+j)\n              .attr(\"data-id\",+j)\n              .attr(\"name\",\"point[\"+j+\"][y]\");\n           if(CrossSection[j].height > csHeight){\n              csHeight = CrossSection[j].height ;\n          }\n          console.log(\"Point [\"+(j+1)+\"] = \" + CrossSection[j].distance+\" , \" + CrossSection[j].height+\" |\");\n          j++;\n      }\n  );*/\n\n\n  var csWidth = CrossSection[CrossSection.length - 1].distance;\n  var canvas = document.getElementById('canvas');\n\n  if (canvas.getContext) {\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    console.log(\"csWidth: \" + csWidth);\n    console.log(\"csHeight: \" + csHeight);\n    var x_offset = canvas.width * 0.1;\n    var y_offset = +120;\n    var xMultip = 1;\n    var yMultip = 1;\n\n    if (i > 1) {\n      xMultip = (canvas.width - 2 * x_offset) / +csWidth;\n      yMultip = (canvas.height - 2 * x_offset) / +csHeight;\n    }\n\n    console.log(\"xMultip: \" + xMultip);\n    console.log(\"yMultip: \" + yMultip);\n    console.log(\"refLvl: \" + refLvl);\n    ctx.beginPath();\n    ctx.moveTo(0, y_offset);\n    ctx.lineTo(x_offset, y_offset);\n    ctx.lineTo(x_offset + +CrossSection[0].distance, y_offset - (+CrossSection[0].height - +refLvl) * yMultip);\n\n    for (var k = 1; k < CrossSection.length; k++) {\n      ctx.moveTo(x_offset + +xMultip * CrossSection[k - 1].distance, y_offset);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k].distance, y_offset);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k].distance, y_offset - (+CrossSection[k].height - +refLvl) * yMultip);\n      ctx.lineTo(x_offset + +xMultip * CrossSection[k - 1].distance, y_offset - (+CrossSection[k - 1].height - +refLvl) * yMultip);\n    } //ctx.closePath();\n\n\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY3MtZHJhdy5qcz9mYjJkIl0sIm5hbWVzIjpbImkiLCIkIiwibGVuZ3RoIiwiZHJhdyIsImRvY3VtZW50Iiwib24iLCJjb25zb2xlIiwibG9nIiwiYXBwZW5kIiwicGFyZW50cyIsInJlbW92ZSIsIkNzUG9pbnQiLCJfZGlzdGFuY2UiLCJfaGVpZ2h0IiwiZGlzdGFuY2UiLCJoZWlnaHQiLCJjbGVhciIsIkNyb3NzU2VjdGlvbiIsInJlZkx2bCIsInZhbCIsImVhY2giLCJ4IiwiZGF0YSIsInkiLCJjc3NzcyIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJqIiwiY3NIZWlnaHQiLCJyIiwiaW5zZXJ0QnV0dG9uIiwiY3NXaWR0aCIsImNhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImN0eCIsImNsZWFyUmVjdCIsIndpZHRoIiwieF9vZmZzZXQiLCJ5X29mZnNldCIsInhNdWx0aXAiLCJ5TXVsdGlwIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiayIsImxpbmVXaWR0aCIsInN0cm9rZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsQ0FBQyxHQUFHQyxDQUFDLENBQUMsT0FBRCxDQUFELENBQVdDLE1BQVgsR0FBa0IsQ0FBMUI7QUFDQUMsSUFBSTtBQUVKRixDQUFDLENBQUNHLFFBQUQsQ0FBRCxDQUFZQyxFQUFaLENBQWUsT0FBZixFQUF3QixNQUF4QixFQUErQixZQUFVO0FBQ3JDRixFQUFBQSxJQUFJO0FBQ0osSUFBRUgsQ0FBRjtBQUNBTSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBaUJQLENBQWpCLEdBQW1CLElBQS9CO0FBQ0FDLEVBQUFBLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FDS08sTUFETCxDQUNZLEtBQ0osb0NBREksR0FDaUNSLENBRGpDLEdBQ21DLElBRG5DLEdBRUEsc0JBRkEsR0FHSSxrQkFISixHQUd1QkEsQ0FIdkIsR0FHeUIsK0JBSHpCLEdBR3lEQSxDQUh6RCxHQUcyRCxpRUFIM0QsSUFHOEhBLENBQUMsR0FBQyxDQUhoSSxJQUdtSSxNQUhuSSxHQUlBLE9BSkEsR0FLQSxzQkFMQSxHQU1JLGtCQU5KLEdBTXVCQSxDQU52QixHQU15Qiw4QkFOekIsR0FNd0RBLENBTnhELEdBTTBELGlCQU4xRCxHQU00RUEsQ0FONUUsR0FNOEUsd0VBTjlFLEdBT0EsT0FQQSxHQVFBLHNCQVJBLEdBU0ksa0JBVEosR0FTdUJBLENBVHZCLEdBU3lCLDhCQVR6QixHQVN3REEsQ0FUeEQsR0FTMEQsaUJBVDFELEdBUzRFQSxDQVQ1RSxHQVM4RSw4RUFUOUUsR0FVQSxzQkFWQSxHQVdJLHlFQVhKLEdBWUEsT0FaQSxHQWFKLE9BZFI7QUFlSCxDQW5CRDtBQXFCQUMsQ0FBQyxDQUFDRyxRQUFELENBQUQsQ0FBWUMsRUFBWixDQUFlLE9BQWYsRUFBd0IsWUFBeEIsRUFBc0MsWUFBVTtBQUM1Q0osRUFBQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUSxPQUFSLENBQWdCLElBQWhCLEVBQXNCQyxNQUF0QjtBQUNBUCxFQUFBQSxJQUFJO0FBQ1AsQ0FIRDtBQUtBRixDQUFDLENBQUNHLFFBQUQsQ0FBRCxDQUFZQyxFQUFaLENBQWUsT0FBZixFQUF3QixjQUF4QixFQUF3QyxZQUFVO0FBQzlDRixFQUFBQSxJQUFJO0FBQ1AsQ0FGRDs7QUFJQSxTQUFTUSxPQUFULEdBQXdDO0FBQUEsTUFBdkJDLFNBQXVCLHVFQUFiLENBQWE7O0FBQUEsTUFBVkMsT0FBVSx1RUFBRixDQUFFOztBQUNwQyxPQUFLQyxRQUFMLEdBQWdCRixTQUFoQjtBQUNBLE9BQUtHLE1BQUwsR0FBY0YsT0FBZDtBQUNIOztBQUdELFNBQVNWLElBQVQsR0FBZ0I7QUFDWkcsRUFBQUEsT0FBTyxDQUFDVSxLQUFSO0FBRUEsTUFBSUMsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsTUFBSUMsTUFBTSxHQUFHakIsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUFja0IsR0FBZCxFQUFiO0FBRUFsQixFQUFBQSxDQUFDLENBQUMsT0FBRCxDQUFELENBQVdtQixJQUFYLENBQWdCLFlBQVc7QUFDbkIsUUFBSUMsQ0FBQyxHQUFHcEIsQ0FBQyxDQUFDLFdBQVdBLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUXFCLElBQVIsQ0FBYSxJQUFiLENBQVosQ0FBRCxDQUFpQ0gsR0FBakMsRUFBUjtBQUNBLFFBQUlJLENBQUMsR0FBR3RCLENBQUMsQ0FBQyxXQUFXQSxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFxQixJQUFSLENBQWEsSUFBYixDQUFaLENBQUQsQ0FBaUNILEdBQWpDLEVBQVI7QUFDQSxRQUFJSyxLQUFLLEdBQUdQLFlBQVksQ0FBQ1EsSUFBYixDQUFrQixJQUFJZCxPQUFKLENBQVlVLENBQVosRUFBZUUsQ0FBZixDQUFsQixDQUFaO0FBQ0FqQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVUsWUFBWSxDQUFDTyxLQUFLLEdBQUMsQ0FBUCxDQUF4QjtBQUVILEdBTkw7QUFTQVAsRUFBQUEsWUFBWSxDQUFDUyxJQUFiLENBQWtCLFVBQUNDLENBQUQsRUFBR0MsQ0FBSCxFQUFTO0FBQ3ZCLFdBQU9ELENBQUMsQ0FBQ2IsUUFBRixHQUFhYyxDQUFDLENBQUNkLFFBQXRCO0FBQ0gsR0FGRDtBQUlBYixFQUFBQSxDQUFDLENBQUMsT0FBRCxDQUFELENBQVdTLE1BQVg7QUFFQSxNQUFJbUIsQ0FBQyxHQUFHLENBQVI7QUFDQSxNQUFJQyxRQUFRLEdBQUcsQ0FBZjtBQUNBO0FBQ0o7QUFDQTs7QUFDSSxPQUFJLElBQUlDLENBQUMsR0FBRyxDQUFaLEVBQWdCQSxDQUFDLEdBQUdkLFlBQVksQ0FBQ2YsTUFBakMsRUFBMEM2QixDQUFDLEVBQTNDLEVBQStDO0FBQzNDLFFBQUlDLFlBQVksR0FBRyx5RUFBbkI7O0FBQ0EsUUFBR0QsQ0FBQyxLQUFHLENBQVAsRUFBUztBQUNMQyxNQUFBQSxZQUFZLEdBQUcsb0ZBQWY7QUFDSDs7QUFFRC9CLElBQUFBLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FDS08sTUFETCxDQUNZLEtBQ0osb0NBREksR0FDbUN1QixDQURuQyxHQUN1QyxJQUR2QyxHQUVKLHNCQUZJLEdBR0osa0JBSEksR0FHaUJBLENBSGpCLEdBR3FCLCtCQUhyQixHQUd1REEsQ0FIdkQsR0FHMkQsaUVBSDNELElBR2dJQSxDQUFDLEdBQUcsQ0FIcEksSUFHeUksTUFIekksR0FJSixPQUpJLEdBS0osc0JBTEksR0FNSixrQkFOSSxHQU1pQkEsQ0FOakIsR0FNcUIsOEJBTnJCLEdBTXNEQSxDQU50RCxHQU0wRCxpQkFOMUQsR0FNOEVBLENBTjlFLEdBTWtGLGdFQU5sRixHQU1tSmQsWUFBWSxDQUFDYyxDQUFELENBQVosQ0FBZ0JqQixRQU5uSyxHQU00SyxNQU41SyxHQU9KLE9BUEksR0FRSixzQkFSSSxHQVNKLGtCQVRJLEdBU2lCaUIsQ0FUakIsR0FTcUIsOEJBVHJCLEdBU3NEQSxDQVR0RCxHQVMwRCxpQkFUMUQsR0FTOEVBLENBVDlFLEdBU2tGLGdFQVRsRixHQVNtSmQsWUFBWSxDQUFDYyxDQUFELENBQVosQ0FBZ0JoQixNQVRuSyxHQVMwSyxZQVQxSyxHQVVKLHNCQVZJLEdBV0ppQixZQVhJLEdBWUosT0FaSSxHQWFKLE9BZFI7O0FBZUEsUUFBR2YsWUFBWSxDQUFDYyxDQUFELENBQVosQ0FBZ0JoQixNQUFoQixHQUF5QmUsUUFBNUIsRUFBcUM7QUFDakNBLE1BQUFBLFFBQVEsR0FBR2IsWUFBWSxDQUFDYyxDQUFELENBQVosQ0FBZ0JoQixNQUEzQjtBQUNIO0FBQ0o7QUFDRDtBQUNKOztBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUksTUFBSWtCLE9BQU8sR0FBR2hCLFlBQVksQ0FBQ0EsWUFBWSxDQUFDZixNQUFiLEdBQW9CLENBQXJCLENBQVosQ0FBb0NZLFFBQWxEO0FBQ0EsTUFBSW9CLE1BQU0sR0FBRzlCLFFBQVEsQ0FBQytCLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBYjs7QUFFQSxNQUFJRCxNQUFNLENBQUNFLFVBQVgsRUFBdUI7QUFDbkIsUUFBSUMsR0FBRyxHQUFHSCxNQUFNLENBQUNFLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBVjtBQUNBQyxJQUFBQSxHQUFHLENBQUNDLFNBQUosQ0FBYyxDQUFkLEVBQWdCLENBQWhCLEVBQWtCSixNQUFNLENBQUNLLEtBQXpCLEVBQStCTCxNQUFNLENBQUNuQixNQUF0QztBQUNBVCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFZMEIsT0FBeEI7QUFDQTNCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQWF1QixRQUF6QjtBQUNBLFFBQUlVLFFBQVEsR0FBR04sTUFBTSxDQUFDSyxLQUFQLEdBQWEsR0FBNUI7QUFDQSxRQUFJRSxRQUFRLEdBQUcsQ0FBQyxHQUFoQjtBQUVBLFFBQUlDLE9BQU8sR0FBRyxDQUFkO0FBQ0EsUUFBSUMsT0FBTyxHQUFHLENBQWQ7O0FBRUEsUUFBRzNDLENBQUMsR0FBRyxDQUFQLEVBQVU7QUFDTjBDLE1BQUFBLE9BQU8sR0FBRyxDQUFFUixNQUFNLENBQUNLLEtBQVAsR0FBZSxJQUFJQyxRQUFyQixJQUFtQyxDQUFDUCxPQUE5QztBQUNBVSxNQUFBQSxPQUFPLEdBQUcsQ0FBRVQsTUFBTSxDQUFDbkIsTUFBUCxHQUFnQixJQUFJeUIsUUFBdEIsSUFBb0MsQ0FBQ1YsUUFBL0M7QUFDSDs7QUFDRHhCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVltQyxPQUF4QjtBQUNBcEMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWW9DLE9BQXhCO0FBQ0FyQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxhQUFXVyxNQUF2QjtBQUNBbUIsSUFBQUEsR0FBRyxDQUFDTyxTQUFKO0FBQ0FQLElBQUFBLEdBQUcsQ0FBQ1EsTUFBSixDQUFXLENBQVgsRUFBYUosUUFBYjtBQUNBSixJQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBV04sUUFBWCxFQUFvQkMsUUFBcEI7QUFDQUosSUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVdOLFFBQVEsR0FBRSxDQUFDdkIsWUFBWSxDQUFDLENBQUQsQ0FBWixDQUFnQkgsUUFBdEMsRUFBK0MyQixRQUFRLEdBQUUsQ0FBQyxDQUFDeEIsWUFBWSxDQUFDLENBQUQsQ0FBWixDQUFnQkYsTUFBakIsR0FBMEIsQ0FBQ0csTUFBNUIsSUFBb0N5QixPQUE3Rjs7QUFDQSxTQUFJLElBQUlJLENBQUMsR0FBRyxDQUFaLEVBQWdCQSxDQUFDLEdBQUc5QixZQUFZLENBQUNmLE1BQWpDLEVBQTBDNkMsQ0FBQyxFQUEzQyxFQUE4QztBQUMxQ1YsTUFBQUEsR0FBRyxDQUFDUSxNQUFKLENBQVdMLFFBQVEsR0FBRSxDQUFDRSxPQUFELEdBQVN6QixZQUFZLENBQUM4QixDQUFDLEdBQUMsQ0FBSCxDQUFaLENBQWtCakMsUUFBaEQsRUFBeUQyQixRQUF6RDtBQUNBSixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBV04sUUFBUSxHQUFFLENBQUNFLE9BQUQsR0FBU3pCLFlBQVksQ0FBQzhCLENBQUQsQ0FBWixDQUFnQmpDLFFBQTlDLEVBQXVEMkIsUUFBdkQ7QUFDQUosTUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVdOLFFBQVEsR0FBRSxDQUFDRSxPQUFELEdBQVN6QixZQUFZLENBQUM4QixDQUFELENBQVosQ0FBZ0JqQyxRQUE5QyxFQUF1RDJCLFFBQVEsR0FBRSxDQUFDLENBQUN4QixZQUFZLENBQUM4QixDQUFELENBQVosQ0FBZ0JoQyxNQUFqQixHQUEwQixDQUFDRyxNQUE1QixJQUFvQ3lCLE9BQXJHO0FBQ0FOLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXTixRQUFRLEdBQUUsQ0FBQ0UsT0FBRCxHQUFTekIsWUFBWSxDQUFDOEIsQ0FBQyxHQUFDLENBQUgsQ0FBWixDQUFrQmpDLFFBQWhELEVBQXlEMkIsUUFBUSxHQUFFLENBQUMsQ0FBQ3hCLFlBQVksQ0FBQzhCLENBQUMsR0FBQyxDQUFILENBQVosQ0FBa0JoQyxNQUFuQixHQUE0QixDQUFDRyxNQUE5QixJQUFzQ3lCLE9BQXpHO0FBQ0gsS0EzQmtCLENBNkJuQjs7O0FBQ0FOLElBQUFBLEdBQUcsQ0FBQ1csU0FBSixHQUFnQixDQUFoQjtBQUNBWCxJQUFBQSxHQUFHLENBQUNZLE1BQUo7QUFFSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGkgPSAkKCcuY3MtcCcpLmxlbmd0aC0xO1xuZHJhdygpO1xuXG4kKGRvY3VtZW50KS5vbignY2xpY2snLCAnI2FkZCcsZnVuY3Rpb24oKXtcbiAgICBkcmF3KCk7XG4gICAgKytpO1xuICAgIGNvbnNvbGUubG9nKFwiQ2xpY2tlZCEgKGkgPSBcIitpK1wiIClcIik7XG4gICAgJChcIiNkeW5hbWljVGFibGVcIilcbiAgICAgICAgLmFwcGVuZCgnJyArXG4gICAgICAgICAgICAnPHRyIGNsYXNzPVwiY3MtcCBwLTAgbS0wXCIgZGF0YS1pZD1cIicraSsnXCI+JyArXG4gICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cInAtMCBtLTBcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBpZD1cImNzLWktJytpKydcIiB0eXBlPVwibnVtYmVyXCIgIG5hbWU9XCJwb2ludFsnK2krJ11bbnVtYmVyXVwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtc20tY2VudGVyXCIgcmVhZG9ubHkgdmFsdWU9XCInKyhpKzEpKydcIiAvPicgK1xuICAgICAgICAgICAgICAgICc8L3RkPicgK1xuICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJwLTAgbS0wXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJjcy14LScraSsnXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJwb2ludFsnK2krJ11beF1cIiBkYXRhLWlkPVwiJytpKydcIiBjbGFzcz1cImNzLXggZm9ybS1jb250cm9sIHRleHQtc20tY2VudGVyXCIgc3RlcD1cIjAuMDFcIiB2YWx1ZT1cIjAuMDBcIiAvPicgK1xuICAgICAgICAgICAgICAgICc8L3RkPicgK1xuICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJwLTAgbS0wXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJjcy15LScraSsnXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJwb2ludFsnK2krJ11beV1cIiBkYXRhLWlkPVwiJytpKydcIiBjbGFzcz1cImNzLXkgZm9ybS1jb250cm9sIHRleHQtc20tY2VudGVyXCIgc3RlcD1cIjAuMDFcIiB2YWx1ZT1cIjAuMDBcIiAgLz48L3RkPicgK1xuICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJwLTAgbS0wXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIHJlbW92ZS10ciB3LTEwMFwiPi08L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAnPC90ZD4nICtcbiAgICAgICAgICAgICc8L3RyPicpO1xufSk7XG5cbiQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcucmVtb3ZlLXRyJywgZnVuY3Rpb24oKXtcbiAgICAkKHRoaXMpLnBhcmVudHMoJ3RyJykucmVtb3ZlKCk7XG4gICAgZHJhdygpO1xufSk7XG5cbiQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjZHJhdy1idXR0b24nLCBmdW5jdGlvbigpe1xuICAgIGRyYXcoKTtcbn0pO1xuXG5mdW5jdGlvbiBDc1BvaW50KF9kaXN0YW5jZT0wLCBfaGVpZ2h0PTApe1xuICAgIHRoaXMuZGlzdGFuY2UgPSBfZGlzdGFuY2U7XG4gICAgdGhpcy5oZWlnaHQgPSBfaGVpZ2h0O1xufVxuXG5cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgY29uc29sZS5jbGVhcigpO1xuXG4gICAgbGV0IENyb3NzU2VjdGlvbiA9IFtdO1xuICAgIGxldCByZWZMdmwgPSAkKFwiI3JlZl9sdmxcIikudmFsKCk7XG5cbiAgICAkKFwiLmNzLXhcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB4ID0gJChcIiNjcy14LVwiICsgJCh0aGlzKS5kYXRhKFwiaWRcIikpLnZhbCgpO1xuICAgICAgICAgICAgbGV0IHkgPSAkKFwiI2NzLXktXCIgKyAkKHRoaXMpLmRhdGEoXCJpZFwiKSkudmFsKCk7XG4gICAgICAgICAgICBsZXQgY3Nzc3MgPSBDcm9zc1NlY3Rpb24ucHVzaChuZXcgQ3NQb2ludCh4LCB5KSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhDcm9zc1NlY3Rpb25bY3Nzc3MtMV0pO1xuXG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgQ3Jvc3NTZWN0aW9uLnNvcnQoKGEsYikgPT4ge1xuICAgICAgICByZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UgO1xuICAgIH0pO1xuXG4gICAgJCgnLmNzLXAnKS5yZW1vdmUoKTtcblxuICAgIGxldCBqID0gMCA7XG4gICAgbGV0IGNzSGVpZ2h0ID0gMCA7XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiB0ZXN0aW5nIGFub3RoZXIgYXBwcm9hY2hcbiAgICAgKiAqL1xuICAgIGZvcihsZXQgciA9IDAgOyByIDwgQ3Jvc3NTZWN0aW9uLmxlbmd0aCA7IHIrKykge1xuICAgICAgICBsZXQgaW5zZXJ0QnV0dG9uID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgcmVtb3ZlLXRyIHctMTAwXCI+LTwvYnV0dG9uPicgO1xuICAgICAgICBpZihyPT09MCl7XG4gICAgICAgICAgICBpbnNlcnRCdXR0b24gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cImFkZFwiIGlkPVwiYWRkXCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3Mgdy0xMDBcIj4rPC9idXR0b24+J1xuICAgICAgICB9XG5cbiAgICAgICAgJChcIiNkeW5hbWljVGFibGVcIilcbiAgICAgICAgICAgIC5hcHBlbmQoJycgK1xuICAgICAgICAgICAgICAgICc8dHIgY2xhc3M9XCJjcy1wIHAtMCBtLTBcIiBkYXRhLWlkPVwiJyArIHIgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cInAtMCBtLTBcIj4nICtcbiAgICAgICAgICAgICAgICAnPGlucHV0IGlkPVwiY3MtaS0nICsgciArICdcIiB0eXBlPVwibnVtYmVyXCIgIG5hbWU9XCJwb2ludFsnICsgciArICddW251bWJlcl1cIiBjbGFzcz1cImZvcm0tY29udHJvbCB0ZXh0LXNtLWNlbnRlclwiIHJlYWRvbmx5IHZhbHVlPVwiJyArIChyICsgMSkgKyAnXCIgLz4nICtcbiAgICAgICAgICAgICAgICAnPC90ZD4nICtcbiAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwicC0wIG0tMFwiPicgK1xuICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJjcy14LScgKyByICsgJ1wiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwicG9pbnRbJyArIHIgKyAnXVt4XVwiIGRhdGEtaWQ9XCInICsgciArICdcIiBjbGFzcz1cImNzLXggZm9ybS1jb250cm9sIHRleHQtc20tY2VudGVyXCIgc3RlcD1cIjAuMDFcIiB2YWx1ZT1cIicrQ3Jvc3NTZWN0aW9uW3JdLmRpc3RhbmNlKydcIiAvPicgK1xuICAgICAgICAgICAgICAgICc8L3RkPicgK1xuICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJwLTAgbS0wXCI+JyArXG4gICAgICAgICAgICAgICAgJzxpbnB1dCBpZD1cImNzLXktJyArIHIgKyAnXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJwb2ludFsnICsgciArICddW3ldXCIgZGF0YS1pZD1cIicgKyByICsgJ1wiIGNsYXNzPVwiY3MteSBmb3JtLWNvbnRyb2wgdGV4dC1zbS1jZW50ZXJcIiBzdGVwPVwiMC4wMVwiIHZhbHVlPVwiJytDcm9zc1NlY3Rpb25bcl0uaGVpZ2h0KydcIiAgLz48L3RkPicgK1xuICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJwLTAgbS0wXCI+JyArXG4gICAgICAgICAgICAgICAgaW5zZXJ0QnV0dG9uICtcbiAgICAgICAgICAgICAgICAnPC90ZD4nICtcbiAgICAgICAgICAgICAgICAnPC90cj4nKTtcbiAgICAgICAgaWYoQ3Jvc3NTZWN0aW9uW3JdLmhlaWdodCA+IGNzSGVpZ2h0KXtcbiAgICAgICAgICAgIGNzSGVpZ2h0ID0gQ3Jvc3NTZWN0aW9uW3JdLmhlaWdodCA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqICovXG4gICAgLyokKFwiLmNzLWlcIikuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgJChcIiNjcy1pLVwiICsgailcbiAgICAgICAgICAgICAgICAuYXR0cihcInZhbHVlXCIsaisxKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIixcImNzLWktXCIrailcbiAgICAgICAgICAgICAgICAuYXR0cihcIm5hbWVcIixcInBvaW50W1wiK2orXCJdW251bWJlcl1cIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiSW5zZXJ0IGludG86IHggPSBcIiskKFwiI2NzLXgtXCIgKyBqKS52YWwoKSk7XG4gICAgICAgICAgICAkKFwiI2NzLXgtXCIgKyBqKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidmFsdWVcIixDcm9zc1NlY3Rpb25bal0uZGlzdGFuY2UpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLFwiY3MteC1cIitqKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZGF0YS1pZFwiLCtqKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwibmFtZVwiLFwicG9pbnRbXCIraitcIl1beF1cIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiSW5zZXJ0IGludG86IHkgPSBcIiskKFwiI2NzLXktXCIgKyBqKS52YWwoKSk7XG4gICAgICAgICAgICAkKFwiI2NzLXktXCIgKyBqKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidmFsdWVcIixDcm9zc1NlY3Rpb25bal0uaGVpZ2h0KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIixcImNzLXktXCIrailcbiAgICAgICAgICAgICAgICAuYXR0cihcImRhdGEtaWRcIiwrailcbiAgICAgICAgICAgICAgICAuYXR0cihcIm5hbWVcIixcInBvaW50W1wiK2orXCJdW3ldXCIpO1xuXG4gICAgICAgICAgICBpZihDcm9zc1NlY3Rpb25bal0uaGVpZ2h0ID4gY3NIZWlnaHQpe1xuICAgICAgICAgICAgICAgIGNzSGVpZ2h0ID0gQ3Jvc3NTZWN0aW9uW2pdLmhlaWdodCA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBvaW50IFtcIisoaisxKStcIl0gPSBcIiArIENyb3NzU2VjdGlvbltqXS5kaXN0YW5jZStcIiAsIFwiICsgQ3Jvc3NTZWN0aW9uW2pdLmhlaWdodCtcIiB8XCIpO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgKTsqL1xuXG4gICAgbGV0IGNzV2lkdGggPSBDcm9zc1NlY3Rpb25bQ3Jvc3NTZWN0aW9uLmxlbmd0aC0xXS5kaXN0YW5jZSA7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcblxuICAgIGlmIChjYW52YXMuZ2V0Q29udGV4dCkge1xuICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjc1dpZHRoOiBcIitjc1dpZHRoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjc0hlaWdodDogXCIrY3NIZWlnaHQpO1xuICAgICAgICBsZXQgeF9vZmZzZXQgPSBjYW52YXMud2lkdGgqMC4xO1xuICAgICAgICBsZXQgeV9vZmZzZXQgPSArMTIwO1xuXG4gICAgICAgIGxldCB4TXVsdGlwID0gMSA7XG4gICAgICAgIGxldCB5TXVsdGlwID0gMSA7XG5cbiAgICAgICAgaWYoaSA+IDEpIHtcbiAgICAgICAgICAgIHhNdWx0aXAgPSAoKGNhbnZhcy53aWR0aCAtIDIgKiB4X29mZnNldCkpIC8gKCtjc1dpZHRoKTtcbiAgICAgICAgICAgIHlNdWx0aXAgPSAoKGNhbnZhcy5oZWlnaHQgLSAyICogeF9vZmZzZXQpKSAvICgrY3NIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwieE11bHRpcDogXCIreE11bHRpcCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwieU11bHRpcDogXCIreU11bHRpcCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVmTHZsOiBcIityZWZMdmwpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oMCx5X29mZnNldCk7XG4gICAgICAgIGN0eC5saW5lVG8oeF9vZmZzZXQseV9vZmZzZXQpO1xuICAgICAgICBjdHgubGluZVRvKHhfb2Zmc2V0KyArQ3Jvc3NTZWN0aW9uWzBdLmRpc3RhbmNlLHlfb2Zmc2V0LSAoK0Nyb3NzU2VjdGlvblswXS5oZWlnaHQgLSArcmVmTHZsKSp5TXVsdGlwKTtcbiAgICAgICAgZm9yKGxldCBrID0gMSA7IGsgPCBDcm9zc1NlY3Rpb24ubGVuZ3RoIDsgaysrKXtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeF9vZmZzZXQrICt4TXVsdGlwKkNyb3NzU2VjdGlvbltrLTFdLmRpc3RhbmNlLHlfb2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeF9vZmZzZXQrICt4TXVsdGlwKkNyb3NzU2VjdGlvbltrXS5kaXN0YW5jZSx5X29mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHhfb2Zmc2V0KyAreE11bHRpcCpDcm9zc1NlY3Rpb25ba10uZGlzdGFuY2UseV9vZmZzZXQtICgrQ3Jvc3NTZWN0aW9uW2tdLmhlaWdodCAtICtyZWZMdmwpKnlNdWx0aXApO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4X29mZnNldCsgK3hNdWx0aXAqQ3Jvc3NTZWN0aW9uW2stMV0uZGlzdGFuY2UseV9vZmZzZXQtICgrQ3Jvc3NTZWN0aW9uW2stMV0uaGVpZ2h0IC0gK3JlZkx2bCkqeU11bHRpcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2N0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgIH1cbn1cbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY3MtZHJhdy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/cs-draw.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/cs-draw.js"]();
/******/ 	
/******/ })()
;